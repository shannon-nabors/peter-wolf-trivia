{"id":"hfNM","dependencies":[{"name":"/Users/shannonnabors/Documents/projects/peter-wolf/package.json","includedInParent":true,"mtime":1598542986080},{"name":"/Users/shannonnabors/Documents/projects/peter-wolf/node_modules/lodash/package.json","includedInParent":true,"mtime":1597370264538},{"name":"./_createWrap","loc":{"line":1,"column":25},"parent":"/Users/shannonnabors/Documents/projects/peter-wolf/node_modules/lodash/rearg.js","resolved":"/Users/shannonnabors/Documents/projects/peter-wolf/node_modules/lodash/_createWrap.js"},{"name":"./_flatRest","loc":{"line":2,"column":23},"parent":"/Users/shannonnabors/Documents/projects/peter-wolf/node_modules/lodash/rearg.js","resolved":"/Users/shannonnabors/Documents/projects/peter-wolf/node_modules/lodash/_flatRest.js"}],"generated":{"js":"var e=require(\"./_createWrap\"),r=require(\"./_flatRest\"),i=256,o=r(function(r,o){return e(r,i,void 0,void 0,void 0,o)});module.exports=o;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/lodash/rearg.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/lodash/rearg.js","original":{"line":1,"column":0},"generated":{"line":1,"column":4}},{"source":"../node_modules/lodash/rearg.js","original":{"line":1,"column":0},"generated":{"line":1,"column":6}},{"source":"../node_modules/lodash/rearg.js","original":{"line":1,"column":0},"generated":{"line":1,"column":14}},{"source":"../node_modules/lodash/rearg.js","original":{"line":2,"column":0},"generated":{"line":1,"column":31}},{"source":"../node_modules/lodash/rearg.js","original":{"line":2,"column":0},"generated":{"line":1,"column":33}},{"source":"../node_modules/lodash/rearg.js","original":{"line":2,"column":0},"generated":{"line":1,"column":41}},{"source":"../node_modules/lodash/rearg.js","original":{"line":5,"column":0},"generated":{"line":1,"column":56}},{"source":"../node_modules/lodash/rearg.js","original":{"line":5,"column":0},"generated":{"line":1,"column":58}},{"source":"../node_modules/lodash/rearg.js","original":{"line":29,"column":0},"generated":{"line":1,"column":62}},{"source":"../node_modules/lodash/rearg.js","original":{"line":29,"column":0},"generated":{"line":1,"column":64}},{"source":"../node_modules/lodash/rearg.js","original":{"line":29,"column":0},"generated":{"line":1,"column":66}},{"source":"../node_modules/lodash/rearg.js","original":{"line":29,"column":0},"generated":{"line":1,"column":75}},{"source":"../node_modules/lodash/rearg.js","original":{"line":29,"column":0},"generated":{"line":1,"column":77}},{"source":"../node_modules/lodash/rearg.js","original":{"line":30,"column":0},"generated":{"line":1,"column":80}},{"source":"../node_modules/lodash/rearg.js","original":{"line":30,"column":0},"generated":{"line":1,"column":87}},{"source":"../node_modules/lodash/rearg.js","original":{"line":30,"column":0},"generated":{"line":1,"column":89}},{"source":"../node_modules/lodash/rearg.js","original":{"line":30,"column":0},"generated":{"line":1,"column":91}},{"source":"../node_modules/lodash/rearg.js","original":{"line":30,"column":0},"generated":{"line":1,"column":98}},{"source":"../node_modules/lodash/rearg.js","original":{"line":30,"column":0},"generated":{"line":1,"column":105}},{"source":"../node_modules/lodash/rearg.js","original":{"line":30,"column":0},"generated":{"line":1,"column":112}},{"source":"../node_modules/lodash/rearg.js","original":{"line":30,"column":0},"generated":{"line":1,"column":114}},{"source":"../node_modules/lodash/rearg.js","original":{"line":33,"column":0},"generated":{"line":1,"column":119}},{"source":"../node_modules/lodash/rearg.js","original":{"line":33,"column":0},"generated":{"line":1,"column":126}},{"source":"../node_modules/lodash/rearg.js","original":{"line":33,"column":0},"generated":{"line":1,"column":134}}],"sources":{"../node_modules/lodash/rearg.js":"var createWrap = require('./_createWrap'),\n    flatRest = require('./_flatRest');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_REARG_FLAG = 256;\n\n/**\n * Creates a function that invokes `func` with arguments arranged according\n * to the specified `indexes` where the argument value at the first index is\n * provided as the first argument, the argument value at the second index is\n * provided as the second argument, and so on.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} func The function to rearrange arguments for.\n * @param {...(number|number[])} indexes The arranged argument indexes.\n * @returns {Function} Returns the new function.\n * @example\n *\n * var rearged = _.rearg(function(a, b, c) {\n *   return [a, b, c];\n * }, [2, 0, 1]);\n *\n * rearged('b', 'c', 'a')\n * // => ['a', 'b', 'c']\n */\nvar rearg = flatRest(function(func, indexes) {\n  return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n});\n\nmodule.exports = rearg;\n"},"lineCount":null}},"error":null,"hash":"56aec3662effe33a558395fc8c3e8626","cacheData":{"env":{}}}